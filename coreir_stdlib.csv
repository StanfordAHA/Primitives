Category,Name(s),GenParams,ConfigParams,In interface,Out interface,GenParam Invarients,Comments
Bitwise,not,width : uint,,in : BitIn[width],out : Bit[width],,
,"and,or,xor",width : uint,,in[2] : BitIn[width],out : Bit[width],,
,"andr,orr,xorr",width : uint,,in[2] : BitIn[width],out : Bit,,Bitwise Reduce
,"shl,lshr,ashr","width : uint, x : uint",,in : BitIn[width],out : Bit[width],,Static shift by x
,"dshl,dlshr,,dashr ",width : uint,,in[2] : BitIn[width],out : Bit[width],,Dynamic shift
,,,,,,,
Arithmetic,neg,width : uint,,in : BitIn[width],out : Bit[width],,
,"add,sub,mul",width : uint,,in[2] : BitIn[width],out : Bit[width],,
,"udiv,urem",width : uint,,in[2] : BitIn[width],out : Bit[width],,
,"sdiv,srem,smod",width : uint,,in[2] : BitIn[width],out : Bit[width],,
,,,,,,,
Comp,eq,width : uint,,in[2] : BitIn[width],out : Bit,,
,"slt, sgt",width : uint,,in[2] : BitIn[width],out : Bit,,
,"ult,ugt",width : uint,,in[2] : BitIn[width],out : Bit,,
,mux,width : uint,,"in.sel : BitIn, in.in[2] : BitIn[Width]",out : Bit[width],,
,,,,,,,
State,reg,"width: uint, rst : bool, clr : bool, en : bool",init : binary,"in.D : BitIn[width], clk : Clk, in.en? : BitIn, rst? : Rst, in.clr? : BitIn",out.Q : Bit[width],!(rst && clr),
,ram,"width : uint, depth : uint",,"clk : Clk, rst : Rst, read.data : Bit[width], read.addr : BitIn[width], read.en : BitIn, write.data : BitIn[width], write.addr : BitIn[width], write.en : Bit",,,
,,,,,,,
Nocompute,const,width : uint,value : binary,,out : Bit[width],,
,term,width : uint,,in : BitIn[width],,,Terminate signal
,repeat,"type : type, n : uint",,in : type,out: type[n],,Repeat a type n times
,slice,"lo : uint, hi : uint, arrtype: type",,in : In(arrtype),out : Out(arrtype.elemtype)[hi-lo+1],arrtype.isa(Array) && 0<=lo<=hi<arrtype.len ,Slice from an Array
,concat,"ltype : type, rtype : type",,"in.l : In(ltype), in.r : In(rtype)",out : Out(ltype.elemtype)[ltype.len+rtype.len],ltype.isa(Array) && rtype.isa(Array) && ltype.elemtype==rtype.elemtype,Concat two things of the same array type to a longer array
,strip,ntype : type,,in : ntype,out : ntype.rawtype,ntype.isa(Named),Strip the named type
,wrap,ntype : type,,in : ntype.rawtype,out : ntype,ntype.isa(Named),wrap into named type
,,,,,,,
Comparison to QF_BV,,,,,,,
Op,Direct support?,Indirect?,,,,,
concat,1,,,,,,
extract (slice),1,,,,,,
not,1,,,,,,
and,1,,,,,,
or,1,,,,,,
neg,1,,,,,,
add,1,,,,,,
mul,1,,,,,,
udiv,1,,,,,,
urem,1,,,,,,
shl,1,,,,,,
lshr,1,,,,,,
ult,1,,,,,,
nand,0,and->not,,,,,
nor,0,or->not,,,,,
xor,1,,,,,,
xnor,0,xor->not,,,,,
comp (eq),1,,,,,,
sub,1,,,,,,
sdiv,1,,,,,,
srem,1,,,,,,
smod,1,,,,,,
ashr,1,,,,,,
repeat,1,,,,,,
zero_extend,0,"concat(const0,in)",,,,,
sign_extend,0,"concat(repeat(in[msb]),in)",,,,,
rotate_left,0,"concat(shl(1),in[msb])",,,,,
rotate_right,0,"concat(in[0],lshr(1))",,,,,
ule,0,ugt -> not,,,,,
ugt,1,,,,,,
slt,1,,,,,,
sle,0,sgt -> not,,,,,
sgt,1,,,,,,
sge,0,slt -> not,,,,,
const,1,,,,,,